[![lerna](https://img.shields.io/badge/maintained%20with-lerna-cc00ff.svg)](https://lerna.js.org/)
[![view on npm](https://badgen.net/npm/v/@secux/app-luna)](https://www.npmjs.com/package/@secux/app-luna)
[![npm module downloads](https://badgen.net/npm/dt/@secux/app-luna)](https://www.npmjs.org/package/@secux/app-luna)

# `@secux/app-luna`

> SecuX Hardware Wallet LUNA API

## Usage

```ts
import { SecuxLUNA } from "@secux/app-luna";
```

First, create instance of ITransport
- [Web Usb](https://www.npmjs.com/package/@secux/transport-webusb)
- [Web Bluetooth](https://www.npmjs.com/package/@secux/transport-webble)
- [React Native Bluetooth](https://www.npmjs.com/package/@secux/transport-reactnative)

<br />

## Examples
1. Get account address
```
const path = "m/44'/330'/0'/0/0";
const address = await device.getAddress(path);

/*

// transfer data to hardware wallet by custom transport layer
const data = SecuxLUNA.prepareAddress(path);
const response = await device.Exchange(data);
const address = SecuxLUNA.resolveAddress(response);

*/
```

2. Sign transaction
    - transfer asset (MsgSend)
    ```ts
    const signer = {
        path: "m/44'/330'/0'/0/0",
        accountNumber: 12345,
        sequence: 1,
    };
    const params = {
        fee: { uluna: 3000 },
        gasLimit: 12345,
    };
    const send = new SecuxLUNA.MsgSend(from, to, { uluna: 1e6 });

    const { multi_command, serialized } = await device.sign(
        [signer],
        [send],
        params
    );
    const responseList = [];
    for (const data of multi_command) {
        const rsp = await device.Exchange(data);
        responseList.push(rsp);
    }
    const raw_tx = SecuxLUNA.resolveTransaction(responseList, serialized);

    /*

    // transfer data to hardware wallet by custom transport layer.
    const { commands, serialized } = SecuxLUNA.prepareSign(
        [
            { ...signer, publickey: "02acb4bc267db7774614bf6011c59929b006c2554386a3090baff0b3fc418ec044" }
        ],
        [send],
        params
    });
    const responseList = [];
    for (const data of commands) {
        const rsp = await device.Exchange(data);
        responseList.push(rsp);
    }
    const raw_tx = SecuxLUNA.resolveTransaction(responseList, serialized);

    */
    ```

    - execute contract
    ```ts
    const swap = new SecuxLUNA.MsgExecuteContract(
        "terra1amdttz2937a3dytmxmkany53pp6ma6dy4vsllv", 
        "terra156v8s539wtz0sjpn8y8a8lfg8fhmwa7fy22aff", 
        {
            swap: {
                offer_asset: {
                    amount: 1e6,
                    info: {
                        native_token: { denom: "uluna" },
                    },
                },
            },
        },
        { uluna: 1e6 }
    );

    const { multi_command, serialized } = await device.sign(
        [signer],
        [swap],
        params
    );
    
    // ... (same as above)
    ```

    - delegate
    ```ts
    const delegate = new SecuxLUNA.MsgDelegate(
        "terra1amdttz2937a3dytmxmkany53pp6ma6dy4vsllv", 
        "terravaloper1vf2209f5y7s4a66n5ng7wmup5gcc2kghhzy89w", 
        "1000000"
    );

    const { multi_command, serialized } = await device.sign(
        [signer],
        [delegate],
        params
    );
    
    // ... (same as above)
    ```

    - withdraw
    ```ts
    const withdraw = new SecuxLUNA.MsgWithdrawDelegatorReward(
        "terra1amdttz2937a3dytmxmkany53pp6ma6dy4vsllv", 
        "terravaloper1vf2209f5y7s4a66n5ng7wmup5gcc2kghhzy89w" 
    );

    const { multi_command, serialized } = await device.sign(
        [signer],
        [withdraw],
        params
    );
    
    // ... (same as above)
    ```

    - undelegate
    ```ts
    const undelegate = new SecuxLUNA.MsgUndelegate(
        "terra1amdttz2937a3dytmxmkany53pp6ma6dy4vsllv", 
        "terravaloper1vf2209f5y7s4a66n5ng7wmup5gcc2kghhzy89w",
        "1000000"
    );

    const { multi_command, serialized } = await device.sign(
        [signer],
        [undelegate],
        params
    );
    
    // ... (same as above)
    ```

    - redelegate
    ```ts
    const redelegate = new SecuxLUNA.MsgBeginRedelegate(
        "terra1amdttz2937a3dytmxmkany53pp6ma6dy4vsllv", 
        "terravaloper1vf2209f5y7s4a66n5ng7wmup5gcc2kghhzy89w",
        "terravaloper1vk20anceu6h9s00d27pjlvslz3avetkvnwmr35",
        "1000000"
    );

    const { multi_command, serialized } = await device.sign(
        [signer],
        [redelegate],
        params
    );
    
    // ... (same as above)
    ```


# API Reference
{{#class name="SecuxLUNA"}}
{{>body~}}
{{>member-index~}}
<br/>
{{#children inherited=SecuxLUNA ~}} 
<a name="{{{anchorName}}}"></a>

{{>heading-indent}}**{{>sig-name}}**
{{>deprecated~}}
{{#if description}}*{{{inlineLinks description}}}*

{{/if}}
{{>implements~}}
{{>overrides~}}
{{>returns~}}
{{>throws~}}
{{>access~}}
{{>readOnly~}}
{{>params~}}
{{>properties~}}
{{>examples~}}
<br/>
{{/children~}}
{{/class}}

{{#orphans}}
{{#if properties}}{{>header~}}{{/if~}}
{{>properties~}}
<br/>
{{/orphans}}

* * *

&copy; 2018-22 SecuX Technology Inc.

authors:<br/>
andersonwu@secuxtech.com