[![lerna](https://img.shields.io/badge/maintained%20with-lerna-cc00ff.svg)](https://lerna.js.org/)
[![view on npm](https://badgen.net/npm/v/@secux/app-trx)](https://www.npmjs.com/package/@secux/app-trx)
[![npm module downloads](https://badgen.net/npm/dt/@secux/app-trx)](https://www.npmjs.org/package/@secux/app-trx)

# `@secux/app-trx`

> SecuX Hardware Wallet TRX API

## Usage

```ts
import { SecuxTRX } from "@secux/app-trx";
```

First, create instance of ITransport
- [Web Usb](https://www.npmjs.com/package/@secux/transport-webusb)
- [Web Bluetooth](https://www.npmjs.com/package/@secux/transport-webble)
- [React Native Bluetooth](https://www.npmjs.com/package/@secux/transport-reactnative)

<br/>

## Examples
1. Get address of bip44 path
```ts
const path = "m/44'/195'/0'/0/0";
const address = await device.getAddress(path);

/*

// transfer data to hardware wallet by custom transport layer.
const data = SecuxTRX.prepareAddress(path);
const response = await device.Exchange(data);
const address =  SecuxTRX.resolveAddress(response);

*/
```

2. Sign transaction (TransferContract)
```ts
const TronWeb = require("tronweb");

// fetch block data
const tronWeb = new TronWeb({ fullHost: 'https://api.trongrid.io' });
const block = await tronWeb.trx.getConfirmedCurrentBlock();

const content = {
    to: "TJKiYicrKqB7PR2wywfWKkNMppNRqd6tXt",
    amount: 1e5,
    blockID: block.blockID,
    blockNumber: block.block_header.raw_data.number,
    timestamp: block.block_header.raw_data.timestamp
};

// sign
const { raw_tx, signature } = await device.sign("m/44'/195'/0'/0/0", content);

/*

// transfer data to hardware wallet by custom transport layer.
const { commandData, rawTx } = SecuxTRX.prepareSign("m/44'/195'/0'/0/0", content);
const response = await device.Exchange(commandData);
const raw_tx = SecuxTRX.resolveTransaction(response, rawTx);

*/

// broadcast
const response = await tronWeb.trx.sendHexTransaction(raw_tx);
```

3. Sign TRC10 transaction (TransferAssetContract)
```ts
const content = {
    to: "TJKiYicrKqB7PR2wywfWKkNMppNRqd6tXt",
    token: 1002000,
    amount: 1e5,
    blockID: block.blockID,
    blockNumber: block.block_header.raw_data.number,
    timestamp: block.block_header.raw_data.timestamp
};

const { raw_tx, signature } = await device.sign("m/44'/195'/0'/0/0", content);

/*

// transfer data to hardware wallet by custom transport layer.
const { commandData, rawTx } = SecuxTRX.prepareSign("m/44'/195'/0'/0/0", content);
const response = await device.Exchange(commandData);
const raw_tx = SecuxTRX.resolveTransaction(response, rawTx);

*/
```

4. Sign TRC20 transaction (TriggerSmartContract)
   * \[tokenId\]: the TRC10 asset ID that transfered to the contract while calling the contract.
   * \[tokenValue\]: the amount of TRC10 asset that transfered to the contract while calling the contract.
   * \[callValue\]: the amount of TRX that transfered to the contract while calling the contract, the unit is sun.
```ts
const content = {
    contract: "TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t",
    // data field can use abi encoded string optionally
    data: [
        { type: "address", value: "TJKiYicrKqB7PR2wywfWKkNMppNRqd6tXt" },
        { type: "uint256", value: 1e5 }
    ],
    blockID: block.blockID,
    blockNumber: block.block_header.raw_data.number,
    timestamp: block.block_header.raw_data.timestamp
};

const { raw_tx, signature } = await device.sign("m/44'/195'/0'/0/0", content);

/*

// transfer data to hardware wallet by custom transport layer.
const { commandData, rawTx } = SecuxTRX.prepareSign("m/44'/195'/0'/0/0", content);
const response = await device.Exchange(commandData);
const raw_tx = SecuxTRX.resolveTransaction(response, rawTx);

*/
```

# API Reference
{{#class name="SecuxTRX"}}
{{>body~}}
{{>member-index~}}
<br/>
{{#children inherited=SecuxTRX ~}} 
<a name="{{{anchorName}}}"></a>

{{>heading-indent}}**{{>sig-name}}**
{{>deprecated~}}
{{#if description}}*{{{inlineLinks description}}}*

{{/if}}
{{>implements~}}
{{>overrides~}}
{{>returns~}}
{{>throws~}}
{{>access~}}
{{>readOnly~}}
{{>params~}}
{{>properties~}}
{{>examples~}}
<br/>
{{/children~}}
{{/class}}

{{#orphans}}
{{#if properties}}{{>header~}}{{/if~}}
{{>properties~}}
<br/>
{{/orphans}}

* * *

&copy; 2018-21 SecuX Technology Inc.

authors:<br/>
andersonwu@secuxtech.com